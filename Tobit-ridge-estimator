require(Rlab)
require(psych)
require(pracma)
require(car)
library(ggplot2)
#RIDGE TOBIT WITH INFORMATION CRITERIA

#----Necessary Function of Standard Normal Distribution for Tobit (See Khalaf et. al., 2010)----
ncfunc=function(x,beta,sigma){
  val<-dnorm((x%*%beta)/sigma)/(1-pnorm((x%*%beta)/sigma))
  return(val)
}
#---------------Variance of the Model (See Munoz, 2009)------------------
sigmaf=function(x,y,n1){
  sigmasq<-(1/n1)*(t(y)%*%(y-x%*%beta))
  return(sigmasq)
}
#----------------TOBIT RIDGE REGRESSION FUNCTION--------------------------
tobitridge=function(x,y,lam,k){
  zz<-dim(x)
  p<-zz[2]
  val<-0
  iter<-50
  ys<-0
  yu<-0
  #x<-matrix(0,n,3)
  xs<-matrix(0,n,p)
  xu<-matrix(0,n,p)
  x0<-matrix(0,n,p)
  
  if (y[1]<0){
    y[1]<-(-1)*y[1]
  }
  for (i in 1:n){
    if(y[i]>0){
      ys[i]<-y[i]
      #xs[i,1]<-x[i,1]
      #xs[i,2]<-x[i,2]
      #xs[i,3]<-x[i,3]
      xs[i,]<-x[i,]
      x0[i,]<-NA
      #x0[i,2]<-NA
      #x0[i,3]<-NA
    }
    else{
      ys[i]<-0
      x0[i,]<-x[i,]
      #x0[i,2]<-x[i,2]
      #x0[i,3]<-x[i,3]
    }
  }
  
  for (i in 1:n){
    if(ys[i]!=0){
      yu[i]<-ys[i]
      xu[i,]<-xs[i,]
      #xu[i,2]<-xs[i,2]
      #xu[i,3]<-xs[i,3]
    }
    else{
      yu[i]<-NA
      xu[i,]<-NA
      #xu[i,2]<-NA
      #xu[i,3]<-NA
    }
  }
  au<-data.frame(matrix(0,n,p))
  a0<-data.frame(matrix(0,n,p))
  acl<-data.frame(matrix(0,n,p))
  for(i in 1:p){
    au[,i]<-xu[,i]
    a0[,i]<-x0[,i]
  }
  #----------
  #------------
  #Forlength
  xbddd<-au[,1]
  xdddcl<-xbddd[!is.na(xbddd)]
  lof1<-length(xdddcl)
  
  xbddd0<-a0[,1]
  xddd0<-xbddd0[!is.na(xbddd0)]
  lof2<-length(xddd0)
  #------------------------
  xcl<-matrix(0,lof1,p)
  x0cl<-matrix(0,lof2,p)
  
  ycl<-yu[!is.na(yu)]
  
  for(i in 1:p){
    xb<-au[,i]
    xz<-a0[,i]
    xdcl<-xb[!is.na(xb)]
    xd0<-xz[!is.na(xz)]
    xcl[,i]<-xdcl
    x0cl[,i]<-xd0
    }
  #xcl<-matrix(c(x1cl,x2cl,x3cl,x4cl),length(x1cl),p)
  
  
  #x0cl<-matrix(c(x01cl,x02cl,x03cl,x04cl),length(x01cl),p)
  #Final MAtrices---------------------------------
  Y1<-ycl
  N1<-length(Y1)
  N0<-n-N1
  Y1<-ycl
  X1<-xcl
  X0<-x0cl
  msep<-0
  msep[1]<-9999
  lambda=lam 
  betaM<-matrix(0,p,iter+1)
  betaM[,1]<-matrix(1,p,1)
  for (j in 1:iter){
    sigm<-sigmaf(X1,Y1,N1)
    for (i1 in 1:n){
      if(ys[i1]==0){
        val[i1]<-ncfunc(x[i1,],betaM[,j],sigm)
      }
    }
    valcl<-val[!is.na(val)]
    valcl<-matrix(c(valcl[2:length(valcl)]),length(valcl)-1,1)
    btilde<-solve(t(X1)%*%X1+k*diag(p))%*%t(X1)%*%Y1-sigm[1,1]*solve(t(X1)%*%X1+k*diag(p))%*%t(X0)%*%(valcl)
    betaM[,j+1]<-betaM[,j]+lambda*(btilde-betaM[,j])
    yp<-x%*%betaM[,j]
    msep[j+1]<-mean((y-yp)^2)
    if (msep[j+1]<msep[j]){
      betahat<-betaM[,j+1]
    }
  }
  yhat<-x%*%betahat
  ta<-new.env()
  ta$yhat<-yhat
  ta$betahat<-betahat
  ta$mse<-msep
  ta$X0<-X0
  ta$valcl<-valcl
  ta$p<-p
  ta$sigm<-sigm
  return(ta)
}
